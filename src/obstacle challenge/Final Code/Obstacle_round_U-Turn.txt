#include <Servo.h>
#include <Pixy2.h>
#include "Wire.h"
//#include <MPU6050_light.h>

//MPU6050 mpu(Wire);
unsigned long timer = 0;

//Making objects of incuded classes
Servo steeringServo;
Pixy2 pixy;

//Declaring pins for Ultrasonic Sensors
const int TRIGGER_PIN_FRONT = 44;  // Front sonar sensor trigger pin
const int ECHO_PIN_FRONT = 45;     // Front sonar sensor echo pin

//in case we have to add two more sonars
// const int TRIGGER_PIN_LEFT = 4;  // Left sonar sensor trigger pin
// const int ECHO_PIN_LEFT = 5;     // Left sonar sensor echo pin

// const int TRIGGER_PIN_RIGHT = 6;  // Right sonar sensor trigger pin
// const int ECHO_PIN_RIGHT = 7;     // Right sonar sensor echo pin

const int TRIGGER_PIN_LEFT_CORNER = 46;  // Left sonar sensor trigger pin
const int ECHO_PIN_LEFT_CORNER = 47;     // Left sonar sensor echo pin

const int TRIGGER_PIN_RIGHT_CORNER = 42;  // Right sonar sensor trigger pin
const int ECHO_PIN_RIGHT_CORNER = 43;     // Right sonar sensor echo pin

//declaring pins for Encoder motor
const int ren = 4;
const int len = 9;
const int pwm = 6;

const int ENCA = 27;      // Encoder pulse input A
const int ENCB = 26;      // Encoder pulse input B
volatile long posi = 0;   // Use long to accommodate larger encoder position values
int lapCount = 1;         //initializing a variable to store lap counts
const int totalLaps = 3;  // Set the total number of laps you want to take


//values for Servo control
const int mean_servo_position = 95;                //stering straight
const int extreme_left_servo = 110;                //steering Extreme left 50
const int extreme_right_servo = 80;                //steering Extreme right 150
int current_servo_position = mean_servo_position;  //this will store the position of servo at every instant

//variables to store front, left and right distances
int distanceFront, distanceLeft, distanceRight;

//normal vs turnspeed
const int forwardSpeed = 140;   // Adjust this value for the desired forward speed
const int backwardSpeed = 140;  // Adjust this value for the desired forward speed
const int turnSpeed = 140;      // Adjust this value for the desired turn speed

const int corner_distance_max = 60;  //robo will move 90 degree if detected corner at this distance
const int corner_distance_min = 30;  //robo will move 90 degree if detected corner at this distance
const int critical_distance = 20;    //robo will move 90 degree if detected corner at this distance

//variables for pixy operation
float deadZone = 0;  //dead zone tha defines where the object will not move at all equals to 15%
int signature;
int cont = 0;

//Other variables
int turn;  //to temporarily store the steering value
int desiredAngle = 0;
float angle;

void setup() {
  Serial.begin(9600);
  steeringServo.attach(53);
  //pixy
  pixy.init();

  // Motor
  pinMode(ren, OUTPUT);
  pinMode(len, OUTPUT);
  pinMode(pwm, OUTPUT);

  // Sonar Sensors
  pinMode(TRIGGER_PIN_FRONT, OUTPUT);
  pinMode(ECHO_PIN_FRONT, INPUT);

  //left & right
  // pinMode(TRIGGER_PIN_LEFT, OUTPUT);
  // pinMode(ECHO_PIN_LEFT, INPUT);
  // pinMode(TRIGGER_PIN_RIGHT, OUTPUT);
  // pinMode(ECHO_PIN_RIGHT, INPUT);

  //cornered left & right
  pinMode(TRIGGER_PIN_LEFT_CORNER, OUTPUT);
  pinMode(ECHO_PIN_LEFT_CORNER, INPUT);
  pinMode(TRIGGER_PIN_RIGHT_CORNER, OUTPUT);
  pinMode(ECHO_PIN_RIGHT_CORNER, INPUT);


  // encoder
  pinMode(ENCA, INPUT);
  pinMode(ENCB, INPUT);
  attachInterrupt(digitalPinToInterrupt(ENCA), readEncoder, RISING);
  Serial.println("Car position calculation using encoder pulses...");
}

void loop() {
  move('F');
  updateDistance();
  checkStop();

  while (!checkObstacle() && !checkCriticalTurn() && !checkCorner()) {
    updateDistance();
    //will stay straight if nothing detected
    stayStraight();
    checkStop();
  }

  if (checkObstacle()) {
    obstacleTurn();
  }

  if (checkCriticalTurn()) {
    criticalTurn();
    //Serial.println("corner---");
  }

  if (checkCorner()) {
    cornerTurn();
  }
}

int getDistance(int triggerPin, int echoPin) {
  digitalWrite(triggerPin, LOW);
  delayMicroseconds(2);
  digitalWrite(triggerPin, HIGH);
  delayMicroseconds(5);
  digitalWrite(triggerPin, LOW);

  unsigned long duration = pulseIn(echoPin, HIGH);
  int distance = duration * 0.0343 / 2;
  return distance;
}

void updateDistance() {
  distanceFront = getDistance(TRIGGER_PIN_FRONT, ECHO_PIN_FRONT);
  distanceLeft = getDistance(TRIGGER_PIN_LEFT_CORNER, ECHO_PIN_LEFT_CORNER);
  distanceRight = getDistance(TRIGGER_PIN_RIGHT_CORNER, ECHO_PIN_RIGHT_CORNER);

  Serial.print("Front Distance: ");
  Serial.print(distanceFront);
  Serial.print(" cm, Left Distance: ");
  Serial.print(distanceLeft);
  Serial.print(" cm, Right Distance: ");
  Serial.print(distanceRight);
  Serial.println(" cm");
  Serial.print(" cm, Current position: ");
  Serial.println(posi);
}

int move(char movement) {
  if (movement == 'S') {
    digitalWrite(ren, 0);
    digitalWrite(len, 0);
    analogWrite(pwm, 0);
  }
  if (movement == 'F') {
    digitalWrite(ren, 1);
    digitalWrite(len, 0);
    analogWrite(pwm, forwardSpeed);
  }
  if (movement == 'B') {
    digitalWrite(ren, 0);
    digitalWrite(len, 1);
    analogWrite(pwm, backwardSpeed);
  }
}

//Checking Functions
bool checkCriticalTurn() {
  if (!checkObstacle() && (distanceFront <= critical_distance))
    return true;
  else return false;
}

bool checkCorner() {
  if (distanceFront <= corner_distance_max && distanceFront >= corner_distance_min && !checkObstacle())
    return true;
  else return false;
}

bool checkObstacle() {
  // grab blocks!
  uint16_t blocks = pixy.ccc.getBlocks();
  if (blocks) {
    return true;
  } else false;
}

//turning related functions
void criticalTurn() {
  turn = current_servo_position;
  int initialTurn = turn + 5;

  move('B');
  // if (turn < mean_servo_position) {
  //   turn = extreme_left_servo;
  // } else if (turn > mean_servo_position) {
  //   turn = extreme_right_servo;
  // } else {
  //   turn = mean_servo_position;
  // }

  // steeringServo.write(turn);

  steeringServo.write(mean_servo_position);

  while (true) {
    updateDistance();
    if (distanceFront >= 30 || checkObstacle())
      break;
  }
  move('S');
  delay(40);

  steeringServo.write(initialTurn);
  current_servo_position = initialTurn;
  move('F');
  delay(30);
}

void cornerTurn() {
  turn = current_servo_position;

  if (distanceLeft < distanceRight) {
    turn -= 20;
  } else if (distanceRight < distanceLeft) {
    turn += 20;
  }

  if (turn > extreme_left_servo) {
    turn = extreme_left_servo + 20;
  }
  if (turn < extreme_right_servo) {
    turn = extreme_right_servo - 20;
  }

  steeringServo.write(turn);
  current_servo_position = turn;
  delay(80);
}

void obstacleTurn() {
  turn = current_servo_position;
  updateDistance();
  float location = pixyCheck();

  if (location >= deadZone) {
    if (signature == 2) {        // put signature number of green
      if (distanceLeft <= 26) {  //checking if robot is touching the left wall
        turn -= 15;              //turn right
      }
      turn += 10;                 //turn left
    } else if (signature == 1) {  //red
      if (distanceRight <= 22) {  //checking if robot is touching the right wall
        turn += 15;               //turn left
      }
      turn -= 10;  //turn right
    }

    if (turn > extreme_left_servo) {
      turn = extreme_left_servo;
    }
    if (turn < extreme_right_servo) {
      turn = extreme_right_servo - 15;  //more right turn
    }

    steeringServo.write(turn);
    delay(30);
  } else if (location <= -deadZone) {
    if (signature == 2) {        // put signature number of green
      if (distanceLeft <= 26) {  //checking if robot is touching the left wall
        turn -= 15;              //turn right
      }
      turn += 10;  //turn left
    } else {
      if (distanceRight <= 26) {  //checking if robot is touching the right wall
        turn += 15;               //turn left
      }
      turn -= 10;  //turn right
    }

    if (turn >= extreme_left_servo) {  //more left turn
      turn = extreme_left_servo + 15;
    }
    if (turn <= extreme_right_servo) {
      turn = extreme_right_servo;
    }

    steeringServo.write(turn);
    delay(30);
  }

  current_servo_position = turn;
}

void stayStraight() {
  turn = current_servo_position;

  if (distanceLeft < distanceRight) {
    turn -= 3;
  } else if (distanceRight < distanceLeft) {
    turn += 3;
  }

  if (turn > extreme_left_servo) {
    turn = extreme_left_servo;
  }
  if (turn < extreme_right_servo) {
    turn = extreme_right_servo;
  }

  steeringServo.write(turn);
  current_servo_position = turn;
  delay(30);
}

//Encoder Related Stuff
void readEncoder() {
  int n = digitalRead(ENCB);
  if (n > 0) {
    posi++;
  } else {
    posi--;
  }
}

void checkStop() {
  while (lapCount == 2) {
    if (posi >= 27000) {
      move('S');
      delay(1000);

      //in case your car didn't stop straight
      stayStraight();
      stayStraight();
      stayStraight();
      move('F');
      delay(1800);
      move('S');
      delay(1000);

      //after obstacle is straight, look which color is front
      if (checkObstacle()) {
        if (signature == 2) {  //if obstacle is green, break the loop and keep moving in the previous direction
          break;
        }
      }

      move('F');
      //if loop is not break, we'll pass by the obstacle take a U turn
      //code for crossing the red obstacle successfully
      while (checkObstacle()) {
        obstacleTurn();
        if (signature != 1) {  // if robot start seeing next obstacle
          break;
        }
      }

      delay(500);  //give it delay so that it can cross the obstacle
      //code for taking a U turn
      steeringServo.write(extreme_left_servo - 30);

      // adjust this delay to control the amount of time for which robot turns
      //--------------------------//
      delay(800);
      //--------------------------//

      posi = 4000;  // set initial pulse value for lap 3
      lapCount++;
      break;
    }
  }

  if (posi > 30000 && distanceFront > 150 && distanceFront < 170) {
    // Reset encoder position after each lap
    if (lapCount == totalLaps) {
      digitalWrite(ren, LOW);
      digitalWrite(len, LOW);
      analogWrite(pwm, 0);
      Serial.println("All laps completed. Stopping the car.");
      while (true)
        ;
    } else {
      // Increment the lap count
      lapCount++;
      posi = 0;
    }
  } else if (posi >= 34000 && distanceFront < 150) {
    if (lapCount == totalLaps) {
      digitalWrite(ren, LOW);
      digitalWrite(len, LOW);
      analogWrite(pwm, 0);
      Serial.println("All laps completed. Stopping the car.");
      while (true)
        ;
    } else {
      // Increment the lap count
      lapCount++;
      posi = 0;
    }
  }
}

//Pixy related Functions
float pixyCheck() {
  int x, y, width, height;
  float cx, cy, area;

  // grab blocks!
  uint16_t blocks = pixy.ccc.getBlocks();

  // If there are detect blocks, print them!
  if (blocks) {
    signature = pixy.ccc.blocks[0].m_signature;
    width = pixy.ccc.blocks[0].m_width;  //width of the object
    x = pixy.ccc.blocks[0].m_x;          //x value of the object
    cx = (x + (width / 2));              //center x position
    cx = mapfloat(cx, 0, 320, -1, 1);    // aplying normalization. If value is from 0-320 change from -1 to 1. This helps in the computation

    // Serial.print("sig: ");
    // Serial.print(signature);
    // Serial.print(" x:");
    // Serial.print(x);
    // Serial.print(" y:");
    // Serial.print(y);
    // Serial.print(" width: ");
    // Serial.print(width);
    // Serial.print(" height: ");
    // Serial.print(height);
    // Serial.print(" cx: ");
    // Serial.print(cx);
    // Serial.print(" cy: ");
    // Serial.println(cy);

  } else {
    cont += 1;
    if (cont == 50) {
      cont = 0;
      cx = 0;
    }
  }
  return cx;  //sending back the x location to tell our robot to turn in a particular direction whether is positive or negative
}

float mapfloat(long x, long in_min, long in_max, long out_min, long out_max) {
  return (float)(x - in_min) * (out_max - out_min) / (float)(in_max - in_min) + out_min;
}